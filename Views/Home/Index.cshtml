@model (List<Tag>, Post, int?, List<string>)

@{
    ViewData["Title"] = "Home page";
    ViewData["Page"] = "Home";
}
@section Styles {
    <link rel="stylesheet" href="~/css/home_index.css" asp-append-version="true" />
}

<button type="button" class="create-post" id="create-post">
    <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" fill="currentColor" class="bi bi-pen"
        viewBox="0 0 16 16">
        <path
            d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
    </svg>
</button>
<div class="modal" id="modal">
    <div class="modal-content">
        <h2 class="create-post-header">Create new post</h2>
        <form method="post" action="@Url.Action("CreatePost","Post")" class="create-post-form" id="create-post-form">
            <div>
                <div id="create-post-display" class="create-post-display"></div>
                <label class="create-post-image">Image: <input id="image-url" type="url" name="Picture" value="@Model.Item2.Picture" placeholder="https://example.com/image.jpg"></label>
                <label for="" class="create-post-tags">
                    @foreach (var tag in Model.Item1)
                    {
                        <label class="checkbox-container"><input class="checkbox" type="checkbox" name="Tags" value="@tag.Id" @(Model.Item2.Tags.Any(t => t.Name == tag.Name) ? "checked" : "")>
                            <span class="checkmark">@tag.Name</span>
                        </label>
                    }
                </label>
                <p>At least 1 tag is required!</p>
            </div>
            <div>
                <label class="create-post-title">Title: <input type="text" name="Title" value="@Model.Item2.Title" required></label>
                <label class="create-post-desc">Description:<br><textarea name="Description" rows="12" cols="40">@Model.Item2.Description</textarea></label>
                <label class="create-post-amount">Amount accept: <input type="number" name="AmountAccept" value="@(Model.Item2.AmountAccept != 0 ? Model.Item2.AmountAccept : "")" required></label>
                <label>Accept type:</label>
                <label for="" class="create-post-type">
                    <label>
                        On queue
                        <input type="radio" name="AcceptType" value="OnFull" @(Model.Item2.AcceptType == "OnFull" ? "Checked" : "") required>
                    </label>
                    <label>
                        On selection
                        <input type="radio" name="AcceptType" value="OnSelect" @(Model.Item2.AcceptType == "OnSelect" ? "Checked" : "") required>
                    </label>
                    <label>
                        Random
                        <input type="radio" name="AcceptType" value="OnRandom" @(Model.Item2.AcceptType == "OnRandom" ? "Checked" : "") required>
                    </label>
                </label>
                <label class="create-post-cdate">Close date: <input type="datetime-local" name="CloseDate" value="@(Model.Item2.CloseDate != null ? Model.Item2.CloseDate?.ToString("yyyy-MM-ddTHH:mm") : "")" required></label>
            </div>
        </form>
        <button type="submit" form="create-post-form" class="confirm-post" id="confirm-post">Confirm</button>
        <button type="button" class="cancel-post" id="cancel-post">Cancel</button>
    </div>
</div>
<div class="modal" id="modal2">
    <div class="modal-content2">
        <h2 class="create-post-header">Advanced Search Filters</h2>
        <h2>Accept Type</h2>
        <div>
            <label class="checkbox-container">
                <input class="typequery" type="checkbox" name="typequery" value="OnFull" checked>
                <span class="checkmark">On queue</span>
            </label>
            <label class="checkbox-container">
                <input class="typequery" type="checkbox" name="typequery" value="OnSelect" checked>
                <span class="checkmark">On Select</span>
            </label>
            <label class="checkbox-container">
                <input class="typequery" type="checkbox" name="typequery" value="OnRandom" checked>
                <span class="checkmark">On Random</span>
            </label>
        </div>

        <h2>Post status</h2>
        <div>
            <label class="checkbox-container">
                <input class="statusquery" type="checkbox" name="statusquery" value="0" checked>
                <span class="checkmark">Open</span>
            </label>
            <label class="checkbox-container">
                <input class="statusquery" type="checkbox" name="statusquery" value="1" checked>
                <span class="checkmark">Concluded</span>
            </label>
            <label class="checkbox-container">
                <input class="statusquery" type="checkbox" name="statusquery" value="2" checked>
                <span class="checkmark">Selected</span>
            </label>
            <label class="checkbox-container">
                <input class="statusquery" type="checkbox" name="statusquery" value="3" checked>
                <span class="checkmark">Archived</span>
            </label>
        </div>

        <h2>Order by</h2>
        <div>
            <div class="filter-orderby">
                <label>Create date <input type="radio" class="orderby" name="orderby" value="CreateDate" checked></label>
                <label>Close date <input type="radio" class="orderby" name="orderby" value="CloseDate"></label>
                <label>Amount accept <input type="radio" class="orderby" name="orderby" value="AmountAccept"></label>
                <label>Enrolled count <input type="radio" class="orderby" name="orderby" value="EnrolledCount"></label>
            </div>
            <div class="filter-orderby">
                <label>
                    Ascending
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up-circle" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8m15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707z"/>
                    </svg>
                    <input type="radio" class="ascending" name="ascending" value="true">
                </label>
                <label>
                    Descending
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-circle" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8m15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293z"/>
                    </svg>
                    <input type="radio" class="ascending" name="ascending" value="false" checked>
                </label>
            </div>
        </div>

        <button type="button" class="confirm-post" id="close-advance">Done</button>
    </div>
</div>
<section>
    <section class="search">
        <section class="searchbar">
            <input type="text" id="search-bar" placeholder="Search title, tags or add filter">
            <button type="button" id="search-submit" form="search-bar">
                &nbsp&nbsp
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search"
                    viewBox="0 0 16 16">
                    <path
                        d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                </svg>
                &nbsp&nbsp
            </button>
        </section>
        <button type="button" class="advanced-filter" id="advanced-filter">Advanced</button>
    </section>
    <section class="tag-section" id="tag-section">
        <section class="tagsearch open" id="tagsearch">
            <form method="get" action="@Url.Action("CreateTag","Home")" id="create-tag-form" hidden></form>
            <button type="submit" form="create-tag-form" class="create-tag-button" id="create-tag-button" hidden>New tag</button>
        </section>
        <button type="button" class="tag-dropdown" id="tag-dropdown">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots" viewBox="0 0 16 16">
                <path d="M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3"/>
            </svg>
        </button>
    </section>
    <section class="all-tagsearch" id="all-tagsearch">
        
    </section>
    <div class="row" id="post-display-container"></div>
    <div class="loading" id="loading">Loading...</div>
</section>

@section Scripts {
    <script>
        const create_post_button = document.getElementById("create-post");
        const cancel_post_button = document.getElementById("cancel-post");
        const confirm_post_button = document.getElementById("confirm-post");
        const popup = document.getElementById("modal");
        const search_bar = document.getElementById("search-bar");
        const search_submit = document.getElementById("search-submit");
        const tag_dropdown = document.getElementById("tag-dropdown");
        const tagsearch = document.getElementById("tagsearch");
        const all_tagsearch = document.getElementById("all-tagsearch");
        const popup2 = document.getElementById("modal2");
        const advanced_filter_button = document.getElementById("advanced-filter");
        const close_advance = document.getElementById("close-advance");

        advanced_filter_button.addEventListener("click", () => {
            popup2.style.display = "block";
        });
        close_advance.addEventListener("click", () => {
            popup2.style.display = "none";
            submit_search();
        })
        popup2.addEventListener("click", (event) => {
            if (!event.target.closest(".modal-content2")) {
                popup2.style.display = "none";
                submit_search();
            }
        });

        search_bar.addEventListener("keydown", (event) => {
            if (event.key == "Enter") {
                submit_search();
            }
        });

        search_submit.addEventListener("click", submit_search);


        function submit_search() {
            loading.innerText = "Loading...";
            is_loading = true;
            loading.style.display = "block";
            column_div.forEach(div => div.innerHTML = "");
            page_number = 1;
            current_buffered_post = [];
            close_date_list = [];
            get_post();
            window.addEventListener("scroll", infinite_scrolling_handler);
        }

        tagsearch.addEventListener("click", (event) => {
            if (event.target.closest(".tag-btn input")) {
                submit_search();
            }
        })

        all_tagsearch.addEventListener("click", (event) => {
            if (event.target.closest(".all-tag-btn input")) {
                submit_search();
            }
        })

        tag_dropdown.addEventListener("click", toggle_tag_search_mode);

        function toggle_tag_search_mode() {
            all_tagsearch.classList.toggle('open');
            tagsearch.classList.toggle('open');
        }

        create_post_button.addEventListener("click", () => {
            if (@Model.Item3 == 0) {
                window.location.href = "@Url.Action("Login", "Account")";
            }
            else {
            popup.style.display = "block";
            }
        });
        popup.addEventListener("click", (event) => {
            if (!event.target.closest(".modal-content")) {
                popup.style.display = "none";
            }
        });
        cancel_post_button.addEventListener("click",()=>{
            popup.style.display = "none";
        })

        function show_tag() {
            let tags = @Html.Raw(Json.Serialize(Model.Item1));
            let tag_lst = []
            let display_tag_lst = []
            for (const tag in tags) {
                tag_lst.push(tags[tag].name)
            }
            console.log(tag_lst)
            @* display_tag_lst = tag_lst.slice(0,4); *@
            display_tag_lst = @Json.Serialize(Model.Item4);
            for (tag of display_tag_lst) {
                tagsearch.innerHTML +=
                    `<label class="tag-btn">
                        <input class="checkbox" type="checkbox" name="${tag}" value="${tag}">
                        <span class="tag-btn-checkmark">${tag}</span>
                    </label>`;
            }
            for (tag of tag_lst) {
                all_tagsearch.innerHTML += 
                    `<label class="all-tag-btn">
                            <input class="checkbox" type="checkbox" name="${tag}" value="${tag}">
                            <span class="all-tag-btn-checkmark">${tag}</span>
                    </label>`
            }
        }
        show_tag();

        const post_display_container = document.getElementById("post-display-container");
        var current_page_width = (window.innerWidth >= 900) ? "Large" : "Small";
        var current_buffered_post = [];
        var number_of_column_div;
        var column_div;
        var page_number = 1;
        var is_loading = false;
        const loading = document.getElementById("loading");

        post_display_container.addEventListener("click", event => {
            redirect_button = event.target.closest(".post-redirect");
            post_title = event.target.closest("h2");
            if (redirect_button != null) {
                post_id = redirect_button.dataset.postid;
                window.location.href = `@Url.Action("Post", "Post")?id=${post_id}`;
                return;
            }
            else if (post_title != null) {
                post_id = post_title.dataset.postid;
                window.location.href = `@Url.Action("Post", "Post")?id=${post_id}`;
                return;
            }
        })

        function responsive_post_column() {
            let screen_width = window.innerWidth;
            number_of_column_div = (screen_width >= 900) ? 4 : 1;
            post_display_container.innerHTML = "";
            for (let i = 0; i < number_of_column_div; i++){
                let div = document.createElement("div");
                div.className = "col";
                post_display_container.appendChild(div);
            }
            column_div = post_display_container.querySelectorAll("div");
            post_arrange(current_buffered_post);
        }

        function get_post() {
            let checkedTags
            if (document.getElementById('all-tagsearch').classList.contains('open')) {
                checkedTags = Array.from(document.querySelectorAll(".all-tagsearch .checkbox:checked")).map(checkbox => checkbox.value).join(' ');
            }
            else {
                checkedTags = Array.from(document.querySelectorAll(".tagsearch .checkbox:checked")).map(checkbox => checkbox.value).join(' ');
            }         
            let typequery = Array.from(document.querySelectorAll(".typequery:checked")).map(checkbox => checkbox.value).join(' ');
            let statusquery = Array.from(document.querySelectorAll(".statusquery:checked")).map(checkbox => checkbox.value).join('&statusquery=');
            let orderby = document.querySelector(".orderby:checked").value;
            let ascending = document.querySelector(".ascending:checked").value;

            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    let post_list = JSON.parse(xhttp.response);
                    console.log(post_list);
                    if (post_list.length === 0) {
                        window.removeEventListener("scroll", infinite_scrolling_handler);
                        if (current_buffered_post.length != 0) {
                            console.log(current_buffered_post)
                            loading.innerText = "That's all for now!";
                        }
                        else {
                            loading.innerText = "Nothing here yet!";
                        }
                        return;
                    }            
                    new_post_card_list = create_post_card(post_list)
                    countdown_worker.postMessage(close_date_list);
                    current_buffered_post = current_buffered_post.concat(new_post_card_list);
                    post_arrange(new_post_card_list);
                    console.log("current page = ", page_number);
                    page_number++;
                    is_loading = false;
                    loading.style.display = "none";
                    infinite_scrolling_handler();
                }
            };
            xhttp.open("GET", `@Url.Action("GetPost","Post")?page=${page_number}&textquery=${search_bar.value}&tagquery=${checkedTags}&typequery=${typequery}&statusquery=${statusquery}&orderby=${orderby}&ascending=${ascending}`, true);
            xhttp.send();
        }

        function post_tag_redirect(tagname) {
            const all_tag_search_container = document.getElementById("all-tagsearch")
            if (!all_tag_search_container.classList.contains("open")) {
                toggle_tag_search_mode();
            }
            let all_tag = Array.from(document.querySelectorAll(".all-tag-btn input"));
            all_tag.forEach(tag => {
                tag.checked = false;
            });
            let tag = all_tag_search_container.querySelector(`input[value = ${tagname}]`);
            tag.click();
            @* column_div.forEach(div => div.innerHTML = "");
            page_number = 1;
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    let post_list = JSON.parse(xhttp.response);
                    console.log(post_list);
                    if (post_list.length === 0) {
                        window.removeEventListener("scroll", infinite_scrolling_handler);
                        loading.innerText = "That's all for now!";
                        return;
                    }            
                    current_buffered_post = current_buffered_post.concat(post_list);
                    post_arrange(post_list);
                    console.log("current page = ", page_number);
                    page_number++;
                    is_loading = false;
                    loading.style.display = "none";
                    infinite_scrolling_handler();
                }
            };
            xhttp.open("GET", `@Url.Action("GetPost","Post")?page=${page_number}&textquery=&tagquery=${tagname}&typequery=&statusquery=&orderby=CreateDate&ascending=true`, true);
            xhttp.send(); *@
        }

        function post_arrange(post_list) {
            column_div.forEach((div, div_index) => {
                post_list.forEach((post, post_index) => {
                    if (post_index % number_of_column_div == div_index) {
                        div.appendChild(post)
                    }
                });
            });
        }

        function create_post_card(post_list) {
            let post_card_list = [];
            post_list.forEach(post => {
                let post_card = document.createElement("div");
                post_card.className = "post-card";
                const preview_char_limit = 500;
                let post_description = post.description;
                if (post_description.length > preview_char_limit) {
                    post_description = `${post_description.slice(0,preview_char_limit + 1)}...`;
                }
                close_date = new Date(post.closeDate);
                post_card.innerHTML =
                `<img class="post-img" src="${post.picture}" alt="post-img" style="width:100%" ${post.picture != null ? "" : "hidden"}>
                <div class="container">
                    <section class="post-tag">
                        ${post.tags.map(tag => `<button type="button" onclick="post_tag_redirect('${tag.name}')" class="post-tag-btn" id="post-tag-${tag.name}">${tag.name}</button>`).join('')}
                    </section>
                    <div class="post-header">
                        <img class="post-pfp" src="${post.creator.profilePicture ?? "https://upload.wikimedia.org/wikipedia/en/a/a4/Hide_the_Pain_Harold_%28Andr%C3%A1s_Arat%C3%B3%29.jpg"}" alt="post-pfp" style="width:15%">
                        <div class="post-info">
                            <h2 data-postid="${post.id}"></h2>
                            <p></p>
                        </div>
                    </div>          
                    <p></p>
                    <hr>
                    <section class="post-meta">
                        <p>${show_post_type(post.acceptType)}, ${show_post_status(post.status)}</p>
                        <p>Close : ${close_date.toLocaleString("en-us", { year: 'numeric', month: 'long', day: 'numeric', hour:"numeric", minute:"numeric"})} <span></span></p>
                    </section>
                    <section class="post-join-info">
                        <div class="headcount">
                            <h2>${post.enrolledCount}/${post.amountAccept}</h2>
                            <p>joined</p>
                        </div>
                        <button type="button" data-postid="${post.id}" class="post-redirect" id="post-redirect-${post.id}">See Details</button>
                    </section>
                </div>`;
                @* const post_redirect_button = post_card.getElementById(`post-redirect-${post.id}`);
                post_redirect_button.addEventListener("click",()=>{
                    window.open(`@Url.Action("Post", "Post")?id=${post.id}`, "_blank")
                }); *@
                @* const post_image = post_card.querySelector(".post-img");
                if (post.picture == null) {
                    post_image.style.display = "none";
                } *@
                const title = post_card.querySelector(".post-info h2");
                title.textContent = post.title;
                const username = post_card.querySelector(".post-info p");
                username.textContent = post.creator.username;
                const description = post_card.querySelector(".container > p");
                description.textContent = post_description;
                close_date_list.push(close_date);
                post_card_list.push(post_card);
            });
            return post_card_list
        }

        function infinite_scrolling_handler() {
            const scrollTop = window.pageYOffset;
            const windowHeight = window.innerHeight;
            const documentHeight = document.documentElement.scrollHeight;
            if (scrollTop + windowHeight >= documentHeight - 100) {
                if (!is_loading) {
                    is_loading = true;
                    loading.style.display = "block";
                    get_post();
                }
            }
        }

        window.addEventListener("scroll", infinite_scrolling_handler);

        window.addEventListener("resize", () => {
            let screen_width = window.innerWidth;
            if ((current_page_width === "Large" && screen_width < 900) || (current_page_width === "Small" && screen_width >= 900)) {
                current_page_width = (window.innerWidth >= 900) ? "Large" : "Small";
                responsive_post_column();
            }
        });
        responsive_post_column();
        infinite_scrolling_handler();

        // Realtime Image Preview
        const image_input = document.getElementById('image-url');
        const image_preview = document.getElementById('create-post-display');
        image_preview.style.height = '300px';

        function preview_image() {
            const image_url = image_input.value;
            if (image_url) {
                const img = document.createElement('img');
                img.src = image_url;
                img.alt = 'Image preview';
                img.onload = () => {
                    image_preview.innerHTML = '';
                    image_preview.appendChild(img);
                    image_preview.style.height = 'auto';
                };
                img.onerror = () => {
                };
            } else {
                image_preview.innerHTML = '';
                image_preview.style.height = '300px';
            }
        }

        image_input.addEventListener('input', preview_image); 
        preview_image(); 
        
        function show_post_type(type) {
            if (type == "OnFull") {
                return "On queue";
            }
            else if (type == "OnSelect") {
                return "On selection";
            }
            else if (type == "OnRandom") {
                return "On random";
            }
        }

        function show_post_status(status) {
            if (status == 0) {
                return "Open";
            }
            else if (status == 1 || status == 2) {
                return "Concluded";
            }
            else if (status == 3) {
                return "Archived";
            }
        }

        var close_date_list = [];
        var countdown_worker = new Worker("/js/remining_time_worker.js");
        countdown_worker.onmessage = (event) => {
            current_buffered_post.forEach((post, index) => {
                let span = post.querySelector(".post-meta span");
                span.innerText = event.data[index];
            });
        }

        let redirect_search_query = sessionStorage.getItem('selectedTagName');
        if (redirect_search_query) {
            sessionStorage.removeItem('selectedTagName');
            redirect_search_query = redirect_search_query.split('-')[0];
            post_tag_redirect(redirect_search_query);
        }

    </script>
}