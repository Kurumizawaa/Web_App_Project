@model (List<Tag>, Post)

@{
    ViewData["Title"] = "Home page";
    ViewData["Page"] = "Home";
}
@section Styles {
    <link rel="stylesheet" href="~/css/home_index.css" asp-append-version="true" />
}

<button type="button" class="create-post" id="create-post">
    <svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" fill="currentColor" class="bi bi-pen"
        viewBox="0 0 16 16">
        <path
            d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001m-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708z" />
    </svg>
</button>
<div class="modal" id="modal">
    <div class="modal-content">
        <h2 class="create-post-header">Create new post</h2>
        <form method="post" action="@Url.Action("CreatePost","Post")" class="create-post-form" id="create-post-form">
            <div>
                <div id="create-post-display" class="create-post-display"></div>
                <label class="create-post-image">Image: <input id="image-url" type="url" name="Picture" value="@Model.Item2.Picture" placeholder="https://example.com/image.jpg"></label>
                <label class="create-post-tags">
                    @foreach (var tag in Model.Item1)
                    {
                        <label class="checkbox-container"><input class="checkbox" type="checkbox" name="Tags" value="@tag.Id" @(Model.Item2.Tags.Any(t => t.Name == tag.Name) ? "checked" : "")>
                            <span class="checkmark">@tag.Name</span>
                        </label>
                    }
                </label>
                <p>At least 1 tag is required!</p>
            </div>
            <div>
                <label class="create-post-title">Title: <input type="text" name="Title" value="@Model.Item2.Title" required></label>
                <label class="create-post-desc">Description:<br><textarea name="Description" rows="12" cols="40">@Model.Item2.Description</textarea></label>
                <label class="create-post-amount">Amount accept: <input type="number" name="AmountAccept" value="@(Model.Item2.AmountAccept != 0 ? Model.Item2.AmountAccept : "")" required></label>
                <label>Accept type:</label>
                <label class="create-post-type">
                    <label>
                        Close on full queue
                        <input type="radio" name="AcceptType" value="OnFull" @(Model.Item2.AcceptType == "OnFull" ? "Checked" : "") required>
                    </label>
                    <label>
                        On selection
                        <input type="radio" name="AcceptType" value="OnSelect" @(Model.Item2.AcceptType == "OnSelect" ? "Checked" : "") required>
                    </label>
                    <label>
                        Random
                        <input type="radio" name="AcceptType" value="OnRandom" @(Model.Item2.AcceptType == "OnRandom" ? "Checked" : "") required>
                    </label>
                </label>
                <label class="create-post-cdate">Close date: <input type="datetime-local" name="CloseDate" value="@(Model.Item2.CloseDate != null ? Model.Item2.CloseDate?.ToString("yyyy-MM-ddTHH:mm") : "")" required></label>
            </div>
        </form>
        <button type="submit" form="create-post-form" class="confirm-post" id="confirm-post">Confirm</button>
        <button type="button" class="cancel-post" id="cancel-post">Cancel</button>
    </div>
</div>
<section>
    <section class="search">
        <input type="text" id="search-bar" placeholder="Search title, tags or add filter">
        <button type="button" id="search-submit" form="search-bar">
            &nbsp&nbsp
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search"
                viewBox="0 0 16 16">
                <path
                    d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
            </svg>
            &nbsp&nbsp
        </button>
    </section>
    <section class="tagsearch">
        @foreach (var Tags in Model.Item1)
        {
            <button type="button" class="tag-btn">@Tags.Name</button>
        }
        <form method="get" action="@Url.Action("CreateTag","Home")" id="create-tag-form" hidden></form>
        <button type="submit" form="create-tag-form" class="create-tag-button" id="create-tag-button" hidden>New tag</button>
    </section>
    <div class="row" id="post-display-container"></div>
    <div class="loading" id="loading">Loading...</div>
</section>

@section Scripts {
    <script>
        const create_post_button = document.getElementById("create-post");
        const cancel_post_button = document.getElementById("cancel-post");
        const confirm_post_button = document.getElementById("confirm-post");
        const popup = document.getElementById("modal");
        const search_bar = document.getElementById("search-bar");
        const search_submit = document.getElementById("search-submit");

        // search_submit.addEventListener("click", () => {
        //     post_display_container.innerHTML = "";
        //     page_number = 1;
        //     current_buffered_post = [];
        //     infinite_scrolling_handler();
        // });

        create_post_button.addEventListener("click", () => {
            popup.style.display = "block";
        });
        popup.addEventListener("click", (event) => {
            if (!event.target.closest(".modal-content")) {
                popup.style.display = "none";
            }
        });
        cancel_post_button.addEventListener("click",()=>{
            popup.style.display = "none";
        })
        confirm_post_button.addEventListener("click",()=>{
            
        })

        const post_display_container = document.getElementById("post-display-container");
        var current_page_width = (window.innerWidth >= 900) ? "Large" : "Small";
        var current_buffered_post = [];
        var number_of_column_div;
        var column_div;
        var page_number = 1;
        var is_loading = false;
        const loading = document.getElementById("loading");

        function responsive_post_column() {
            let screen_width = window.innerWidth;
            number_of_column_div = (screen_width >= 900) ? 4 : 1;
            post_display_container.innerHTML = "";
            for (let i = 0; i < number_of_column_div; i++){
                let div = document.createElement("div");
                div.className = "col";
                post_display_container.appendChild(div);
            }
            column_div = post_display_container.querySelectorAll("div");
            post_arrange(current_buffered_post);
        }

        function get_post() {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    let post_list = JSON.parse(xhttp.response);
                    console.log(post_list);
                    if (post_list.length === 0) {
                        window.removeEventListener("scroll", infinite_scrolling_handler);
                        loading.innerText = "That's all for now!";
                        return;
                    }            
                    current_buffered_post = current_buffered_post.concat(post_list);
                    post_arrange(post_list);
                    page_number++;
                    is_loading = false;
                    loading.style.display = "none";
                    infinite_scrolling_handler();
                }
            };
            xhttp.open("GET", `@Url.Action("GetPost","Post")?page=${page_number}&query=${search_bar.value}`, true);
            xhttp.send();
        }

        function post_arrange(post_list) {
            column_div.forEach((div, div_index) => {
                post_list.forEach((post, post_index) => {
                    if (post_index % number_of_column_div == div_index) {
                        let post_card = document.createElement("div");
                        post_card.className = "post-card";
                        const preview_char_limit = 500;
                        let post_description = post.description;
                        if (post_description.length > preview_char_limit) {
                            post_description = `${post_description.slice(0,preview_char_limit + 1)}...`;
                        }
                        post_card.innerHTML =
                        `<img class="post-img" src="${post.picture}" alt="post-img" style="width:100%">
                        <div class="container">
                            <section class="post-tag">
                                ${post.tags.map(tag => `<button type="button" class="post-tag-btn">${tag.name}</button>`).join('')}
                            </section>
                            <div class="post-header">
                                <img class="post-pfp" src="${post.creator.profilePicture}" alt="post-pfp" style="width:15%">
                                <div class="post-info">
                                    <h2>${post.title}</h2>
                                    <p>${post.creator.username}</p>
                                </div>
                            </div>          
                            <p>${post_description.replace(/\r\n/g,"<br>")}</p>
                            <section class="post-join-info">
                                <div class="headcount">
                                    <h2>${post.enrolledCount}/${post.amountAccept}</h2>
                                    <p>joined</p>
                                </div>
                                <button type="button" class="post-redirect" id="post-redirect-${post.id}">See Details</button>
                            </section>
                        </div>`;
                        div.appendChild(post_card);
                        const post_redirect_button = document.getElementById(`post-redirect-${post.id}`);
                        post_redirect_button.addEventListener("click",()=>{
                            @* window.location.href = `@Url.Action("Post", "Post")?id=${post.id}` *@
                            window.open(`@Url.Action("Post", "Post")?id=${post.id}`, "_blank")
                        });
                    }
                });
            });
        }

        function infinite_scrolling_handler() {
            const scrollTop = window.pageYOffset;
            const windowHeight = window.innerHeight;
            const documentHeight = document.documentElement.scrollHeight;
            if (scrollTop + windowHeight >= documentHeight - 100) {
                if (!is_loading) {
                    is_loading = true;
                    loading.style.display = "block";
                    get_post();
                }
            }
        }

        window.addEventListener("scroll", infinite_scrolling_handler);

        window.addEventListener("resize", () => {
            let screen_width = window.innerWidth;
            if ((current_page_width === "Large" && screen_width < 900) || (current_page_width === "Small" && screen_width >= 900)) {
                current_page_width = (window.innerWidth >= 900) ? "Large" : "Small";
                responsive_post_column();
            }
        });
        responsive_post_column();
        infinite_scrolling_handler();

        // Realtime Image Preview
        const image_input = document.getElementById('image-url');
        const image_preview = document.getElementById('create-post-display');
        image_preview.style.height = '300px';

        function preview_image() {
            const image_url = image_input.value;
            if (image_url) {
                const img = document.createElement('img');
                img.src = image_url;
                img.alt = 'Image preview';
                img.onload = () => {
                    image_preview.innerHTML = '';
                    image_preview.appendChild(img);
                    image_preview.style.height = 'auto';
                };
                img.onerror = () => {
                };
            } else {
                image_preview.innerHTML = '';
                image_preview.style.height = '300px';
            }
        }

        image_input.addEventListener('input', preview_image); 
        preview_image(); 
        
    </script>
}