@{
    ViewData["Title"] = "Post page";
    ViewData["Page"] = "Post";
}

@model (List<Tag>, Post, bool, bool)

@section Styles {
    <link rel="stylesheet" href="~/css/post_details.css" asp-append-version="true" />
}

<div class="modal" id="modal">
    <div class="modal-content">
        <h2 class="edit-post-header">Edit post</h2>
        <form method="post" action="@Url.Action("Post","Post")" class="edit-post-form" id="edit-post-form">
            <div>
                <div id="edit-post-display" class="edit-post-display"></div>
                <label class="edit-post-image">Image: <input id="image-url" type="url" name="Picture" value="@Model.Item2.Picture" placeholder="https://example.com/image.jpg"></label>
                <label class="edit-post-tags">
                    @foreach (var Tag in Model.Item1)
                    {
                        <label class="checkbox-container"><input class="checkbox" type="checkbox" name="Tags" value="@Tag.Id" @(Model.Item2.Tags.Contains(Tag) ? "checked" : "")>
                            <span class="checkmark">@Tag.Name</span>
                        </label>
                    }
                </label>
                <p>At least 1 tag is required!</p>
            </div>
            <div>
                <label class="edit-post-title">Title: <input type="text" name="Title" value="@Model.Item2.Title" required></label>
                <label class="edit-post-desc">Description:<br><textarea name="Description" rows="12" cols="40">@Model.Item2.Description</textarea></label>
                <label class="edit-post-amount">Amount accept: <input type="number" name="AmountAccept" value="@(Model.Item2.AmountAccept != 0 ? Model.Item2.AmountAccept : "")" required></label>
                <label>Accept type:</label>
                <label class="edit-post-type">
                    <label>
                        Close on full queue
                        <input type="radio" name="AcceptType" value="OnFull" @(Model.Item2.AcceptType == "OnFull" ? "Checked" : "") required>
                    </label>
                    <label>
                        On selection
                        <input type="radio" name="AcceptType" value="OnSelect" @(Model.Item2.AcceptType == "OnSelect" ? "Checked" : "") required>
                    </label>
                    <label>
                        Random
                        <input type="radio" name="AcceptType" value="OnRandom" @(Model.Item2.AcceptType == "OnRandom" ? "Checked" : "") required>
                    </label>
                </label>
                <label class="create-post-cdate">Close date: <input type="datetime-local" name="CloseDate" value="@(Model.Item2.CloseDate != null ? Model.Item2.CloseDate?.ToString("yyyy-MM-ddTHH:mm") : "")" required></label>
                <input type="number" name="Id" value="@Model.Item2.Id" hidden>
            </div>
        </form>
        <button type="submit" form="edit-post-form" class="confirm-edit-post" id="confirm-edit-post">Confirm</button>
        <button type="button" class="cancel-edit-post" id="cancel-edit-post">Cancel</button>
    </div>
</div>
<section>
    <section class="post-title" id="post-title">
        <b>Post by @((Model.Item2.Creator != null) ? Model.Item2.Creator.Username : "???")</b>
    </section>
    <section class="post-section">
        <section class="post-card">
            <h2>@Model.Item2.Title</h2>
            <section class="post-header">
                <img class="post-pfp" src="@((Model.Item2.Creator != null) ? Model.Item2.Creator.ProfilePicture : "")" alt="post-pfp">
                <div class="post-info">
                    <p>@((Model.Item2.Creator != null) ? Model.Item2.Creator.Username : "???")</p>
                    <p class="post-time">@Model.Item2.CreateDate</p>
                    <div class="post-enroll">
                        <p><span id="enroll-counter">@Model.Item2.EnrolledCount</span>/@Model.Item2.AmountAccept Joined</p>
                        <button type="button" class="post-signup" id="post-signup" @(Model.Item2.Status == PostStatus.Open && Model.Item3 == false && Model.Item4 == false ? "" : "hidden")>Join</button>
                        <button type="button" class="post-abandon" id="post-abandon" @(Model.Item2.Status == PostStatus.Open && Model.Item3 == true && Model.Item4 == false ? "" : "hidden")>Leave</button>
                        @if (Model.Item4 == true)
                        {
                            <button type="button" class="edit-post" id="edit-post" @(Model.Item2.Status != PostStatus.Concluded && Model.Item2.Status != PostStatus.Selected && Model.Item2.Status != PostStatus.Archived ? "" : "hidden")>Edit post</button>
                            <button type="button" class="edit-post" id="edit-post" onclick="window.location.href = '@Url.Action("GeneralAnnouncement","Announcement", new { postid = @Model.Item2.Id })'" @(Model.Item2.Status != PostStatus.Archived ? "" : "hidden")>Announcement</button>
                            <button type="button" class="edit-post" id="post-result" onclick="window.location.href = '@Url.Action("Result","Post", new { id = @Model.Item2.Id })'" @(Model.Item2.Status == PostStatus.Concluded ? "" : "hidden")>Post result</button>
                            <button type="button" class="edit-post" id="announce-result" onclick="window.location.href = '@Url.Action("PostResultAnnouncement","Announcement", new { postid = @Model.Item2.Id })'" @(Model.Item2.Status == PostStatus.Selected ? "" : "hidden")>Announce result</button>
                            <button type="button" class="post-abandon" id="edit-post" onclick="window.location.href = '@Url.Action("ConcludeEarly","Post", new { id = @Model.Item2.Id })'" @(Model.Item2.Status == PostStatus.Open ? "" : "hidden")>Conclude early</button>
                            @* <button type="button" class="post-abandon" id="cancel-post">Cancel post</button> *@
                        }
                    </div>
                </div>
            </section>
            <section class="post-tag">
                @foreach (Tag tag in Model.Item2.Tags)
                {
                    <button type="button" class="post-tag-btn">@tag.Name</button>
                }
            </section>
            <section class="post-details">
                <img class="post-image" src="@Model.Item2.Picture" alt="post-omage">
                <p>@Model.Item2.Description<p>
            </section>
        </section>
    </section>
    <section class="post-title" id="post-title">
        <b>Announcement regarding this post</b>
    </section>
    <section class="post-section">
        <section class="post-card" id="announcement-container"></section>
    </section>
</section>

@section Scripts {
    <script>
        const urlParams = new URLSearchParams(window.location.search);
        const post_id = urlParams.get('post');
        const post_signup_btn = document.getElementById("post-signup")
        const post_abandon_btn = document.getElementById("post-abandon")
        post_signup_btn.addEventListener("click",()=>{
            let xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    let json = JSON.parse(xhttp.response);
                    if (json.enroll_successful == true) {
                        post_signup_btn.style.display = "none";
                        post_abandon_btn.style.display = "block";
                        const enroll_counter = document.getElementById("enroll-counter");
                        enroll_counter.innerText = json.enroll_count;
                        show_snackbar("Enrolled successfully","success");
                    }   
                    else {
                        window.location.href = "@Url.Action("Login", "Account")";
                    }
                }
            };
            xhttp.open("GET", "@Url.Action("Enroll","Post", new { PostId = @Model.Item2.Id })", true);
            xhttp.send();
        });

        post_abandon_btn.addEventListener("click",()=>{
            let xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    let json = JSON.parse(xhttp.response);
                    if (json.unroll_successful == true) {
                        post_signup_btn.style.display = "block";
                        post_abandon_btn.style.display = "none";
                        const enroll_counter = document.getElementById("enroll-counter");
                        enroll_counter.innerText = json.enroll_count;
                        show_snackbar("Unrolled successfully","success");
                    }
                    else {
                        window.location.href = "@Url.Action("Login", "Account")";
                    }
                }
            };
            xhttp.open("GET", "@Url.Action("Unroll","Post", new { PostId = @Model.Item2.Id })", true);
            xhttp.send();
        });

        const edit_post_button = document.getElementById("edit-post");
        const cancel_edit_post_button = document.getElementById("cancel-edit-post");
        const confirm_edit_post_button = document.getElementById("confirm-edit-post");
        const popup = document.getElementById("modal");
        if (edit_post_button != null) {
            edit_post_button.addEventListener("click", () => {
                popup.style.display = "block";
            });
        }
        popup.addEventListener("click", (event) => {
            if (!event.target.closest(".modal-content")) {
                popup.style.display = "none";
            }
        });
        cancel_edit_post_button.addEventListener("click",()=>{
            popup.style.display = "none";
        })
        confirm_edit_post_button.addEventListener("click",()=>{
            
        })

        // Realtime Image Preview
        const image_input = document.getElementById('image-url');
        const image_preview = document.getElementById('edit-post-display');
        image_preview.style.height = '300px';

        function preview_image() {
            const image_url = image_input.value;
            if (image_url) {
                const img = document.createElement('img');
                img.src = image_url;
                img.alt = 'Image preview';
                img.onload = () => {
                    image_preview.innerHTML = '';
                    image_preview.appendChild(img);
                    image_preview.style.height = 'auto';
                };
                img.onerror = () => {
                };
            } else {
                image_preview.innerHTML = '';
                image_preview.style.height = '300px';
            }
        }

        image_input.addEventListener('input', preview_image); 
        preview_image(); 

        const announcement_container = document.getElementById("announcement-container");
        var announcement_card_buffer = [];

        function get_related_announcement() {
            let xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    let json = JSON.parse(xhttp.response);
                    if (json.get_successfully == true) {
                        announcement_list = json.related_announcement;
                        console.log(announcement_list);
                        announcement_container.innerText = "";
                        if (announcement_list.length == 0) {
                            announcement_container.innerText = "No related announcement yet";
                        }
                        announcement_list.forEach(announcement => {
                            const announcement_card = document.createElement("div");
                            announcement_card.className = "announcement-card";
                            var detail = translate_type(announcement);
                            announcement_card.classList.add(detail.theme);
                            announcement_card.innerHTML = 
                            `${detail.icon}
                            <div class="announcement-card-date">${new Date(announcement.announceAt).toLocaleDateString()}</div>
                            <div class="announcement-card-info">
                                <p class="announcement-card-info-type">${detail.type}</p>
                                <p>${detail.message}</p>
                            </div>`;
                            announcement_container.appendChild(announcement_card);
                            announcement_card_buffer.push(announcement_card)
                        });
                        readjust_all();
                    }
                }
            };
            xhttp.open("GET", "@Url.Action("GetRelatedAnnouncement","Announcement", new { Postid = @Model.Item2.Id })", true);
            xhttp.send();
        }
        get_related_announcement();

        function translate_type(announcement) {
            switch (announcement.type) {
                case 0:
                    return { type : "Accepted", message : announcement.message, theme : "lightgreen", icon : `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M8 12.3333L10.4615 15L16 9M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>` };
                case 1:
                    return { type : "Rejected", message : announcement.message, theme : "lightcoral", icon : `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M9 9L15 15M15 9L9 15M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>` };
                case 2:
                    return { type : "Post concluded", message : "This post was concluded automatically at the designated time", theme : "lightseagreen", icon : `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#ffffff"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M3 5.5L5 3.5M21 5.5L19 3.5M9 12.5L11 14.5L15 10.5M20 12.5C20 16.9183 16.4183 20.5 12 20.5C7.58172 20.5 4 16.9183 4 12.5C4 8.08172 7.58172 4.5 12 4.5C16.4183 4.5 20 8.08172 20 12.5Z" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>` };
                case 3:
                    return { type : "General announcement", message : announcement.message, theme : "lightblue", icon : `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M12 8H12.01M12 11V16M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>` };
            }
        }

        window.addEventListener("resize", readjust_all);

        function readjust_all() {
            for (let i = 0; i < announcement_card_buffer.length - 1; i++) {
                adjust_connecting_line(announcement_card_buffer[i], announcement_card_buffer[i + 1]);
            }
        }

        function adjust_connecting_line(before, after) {
            var before_height = window.getComputedStyle(before).height;
            var after_height = window.getComputedStyle(after).height;
            var final_height = (parseInt(before_height.slice(0, -2)) / 2) + (parseInt(after_height.slice(0, -2)) / 2)
            before.style.setProperty("--line-height", `${final_height}px`);
        }
    </script>
}
